CREATE TABLE REGIONS
(
  REGION_ID NUMBER(*, 0) NOT NULL
, REGION_NAME VARCHAR2(50 BYTE) NOT NULL
, CONSTRAINT REGIONS_PK PRIMARY KEY
  (
    REGION_ID
  )
  ENABLE
);


CREATE SEQUENCE REGIONS_SEQ;


CREATE TRIGGER REGIONS_TRG
BEFORE INSERT ON REGIONS
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.REGION_ID IS NULL THEN
      SELECT REGIONS_SEQ.NEXTVAL INTO :NEW.REGION_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;


CREATE TABLE COUNTRIES
(
  COUNTRY_ID NUMBER(*, 0) NOT NULL
, COUNTRY_NAME VARCHAR2(50 BYTE) NOT NULL
, REGION_ID NUMBER(*, 0) NOT NULL
, CONSTRAINT COUNTRIES_PK PRIMARY KEY
  (
    COUNTRY_ID
  )
  ENABLE
);


ALTER TABLE COUNTRIES
ADD CONSTRAINT COUNTRIES_FK1 FOREIGN KEY
(
  REGION_ID
)
REFERENCES REGIONS
(
  REGION_ID
)
ON DELETE SET NULL ENABLE;


CREATE SEQUENCE COUNTRIES_SEQ;


CREATE TRIGGER COUNTRIES_TRG
BEFORE INSERT ON COUNTRIES
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.COUNTRY_ID IS NULL THEN
      SELECT COUNTRIES_SEQ.NEXTVAL INTO :NEW.COUNTRY_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;


CREATE TABLE LOCATIONS
(
  LOCATION_ID NUMBER(*, 0) NOT NULL
, STREET_ADDRESS VARCHAR2(100 BYTE)
, POSTAL_CODE VARCHAR2(20 BYTE)
, CITY VARCHAR2(50 BYTE)
, CONSTRAINT LOCATIONS_PK PRIMARY KEY
  (
    LOCATION_ID
  )
  ENABLE
);


ALTER TABLE LOCATIONS
ADD (STATE_PROVINCE VARCHAR2(50) NOT NULL);


ALTER TABLE LOCATIONS
ADD (COUNTRY_ID INT NOT NULL);


ALTER TABLE LOCATIONS
ADD CONSTRAINT LOCATIONS_FK1 FOREIGN KEY
(
  COUNTRY_ID
)
REFERENCES COUNTRIES
(
  COUNTRY_ID
)
ON DELETE SET NULL ENABLE;


CREATE SEQUENCE LOCATIONS_SEQ;


CREATE TRIGGER LOCATIONS_TRG
BEFORE INSERT ON LOCATIONS
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.LOCATION_ID IS NULL THEN
      SELECT LOCATIONS_SEQ.NEXTVAL INTO :NEW.LOCATION_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;


CREATE TABLE DEPARTMENTS
(
  DEPARTMENT_ID NUMBER(*, 0) NOT NULL
, DEPARTMENT_NAME VARCHAR2(100 BYTE) NOT NULL
, MANAGER_ID NUMBER(*, 0)
, LOCATION_ID NUMBER(*, 0) NOT NULL
, CONSTRAINT DEPARTMENTS_PK PRIMARY KEY
  (
    DEPARTMENT_ID
  )
  ENABLE
);


ALTER TABLE DEPARTMENTS
ADD CONSTRAINT DEPARTMENTS_FK1 FOREIGN KEY
(
  LOCATION_ID
)
REFERENCES LOCATIONS
(
  LOCATION_ID
)
ON DELETE SET NULL ENABLE;


CREATE SEQUENCE DEPARTMENTS_SEQ;


CREATE TRIGGER DEPARTMENTS_TRG
BEFORE INSERT ON DEPARTMENTS
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.DEPARTMENT_ID IS NULL THEN
      SELECT DEPARTMENTS_SEQ.NEXTVAL INTO :NEW.DEPARTMENT_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;


CREATE TABLE EMPLOYEES
(
  EMPLOYEE_ID NUMBER(*, 0) NOT NULL
, FIRST_NAME VARCHAR2(50 BYTE) NOT NULL
, LAST_NAME VARCHAR2(50 BYTE) NOT NULL
, EMAIL VARCHAR2(50 BYTE) NOT NULL
, PHONE_NUMBER VARCHAR2(20 BYTE) NOT NULL
, HIRE_DATE DATE NOT NULL
, JOB_ID NUMBER(*, 0) NOT NULL
, SALARY NUMBER(*, 0)
, COMMISSION_PCT VARCHAR2(100 BYTE)
, MANAGER_ID NUMBER(*, 0)
, DEPARTMENT_ID NUMBER(*, 0) NOT NULL
, CONSTRAINT EMPLOYEES_PK PRIMARY KEY
  (
    EMPLOYEE_ID
  )
  ENABLE
);


ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_FK1 FOREIGN KEY
(
  DEPARTMENT_ID
)
REFERENCES DEPARTMENTS
(
  DEPARTMENT_ID
)
ON DELETE SET NULL ENABLE;


ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_FK2 FOREIGN KEY
(
  EMPLOYEE_ID
)
REFERENCES EMPLOYEES
(
  EMPLOYEE_ID
)
ON DELETE SET NULL ENABLE;


CREATE SEQUENCE EMPLOYEES_SEQ;

CREATE TRIGGER EMPLOYEES_TRG
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.EMPLOYEE_ID IS NULL THEN
      SELECT EMPLOYEES_SEQ.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;


ALTER TABLE DEPARTMENTS
ADD CONSTRAINT DEPARTMENTS_FK2 FOREIGN KEY
(
  DEPARTMENT_ID
)
REFERENCES EMPLOYEES
(
  EMPLOYEE_ID
)
ON DELETE SET NULL ENABLE;


CREATE TABLE JOBS
(
  JOB_ID INT NOT NULL
, JOB_TITLE VARCHAR2(50) NOT NULL
, MIN_SALARY INT
, MAX_SALARY INT
, CONSTRAINT JOBS_PK PRIMARY KEY
  (
    JOB_ID
  )
  ENABLE
);


CREATE SEQUENCE JOBS_SEQ;


CREATE TRIGGER JOBS_TRG
BEFORE INSERT ON JOBS
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.JOB_ID IS NULL THEN
      SELECT JOBS_SEQ.NEXTVAL INTO :NEW.JOB_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;


ALTER TABLE EMPLOYEES
ADD CONSTRAINT EMPLOYEES_FK3 FOREIGN KEY
(
  JOB_ID
)
REFERENCES JOBS
(
  JOB_ID
)
ON DELETE SET NULL ENABLE;


CREATE TABLE JOB_HISTORY
(
  EMPLOYEE_ID NUMBER(*, 0) NOT NULL
, START_DATE DATE NOT NULL
, END_DATE DATE
, JOB_ID NUMBER(*, 0) NOT NULL
, DEPARTMENT_ID NUMBER(*, 0) NOT NULL
, CONSTRAINT JOB_HISTORY_PK PRIMARY KEY
  (
    EMPLOYEE_ID
  , START_DATE
  )
  ENABLE
);


CREATE SEQUENCE JOB_HISTORY_SEQ;


CREATE TRIGGER JOB_HISTORY_TRG
BEFORE INSERT ON JOB_HISTORY
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.EMPLOYEE_ID IS NULL THEN
      SELECT JOB_HISTORY_SEQ.NEXTVAL INTO :NEW.EMPLOYEE_ID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;


ALTER TABLE JOB_HISTORY
ADD CONSTRAINT JOB_HISTORY_FK1 FOREIGN KEY
(
  DEPARTMENT_ID
)
REFERENCES DEPARTMENTS
(
  DEPARTMENT_ID
)
ON DELETE SET NULL ENABLE;


ALTER TABLE JOB_HISTORY
ADD CONSTRAINT JOB_HISTORY_FK2 FOREIGN KEY
(
  EMPLOYEE_ID
)
REFERENCES EMPLOYEES
(
  EMPLOYEE_ID
)
ON DELETE SET NULL ENABLE;


ALTER TABLE JOB_HISTORY
ADD CONSTRAINT JOB_HISTORY_FK3 FOREIGN KEY
(
  JOB_ID
)
REFERENCES JOBS
(
  JOB_ID
)
ON DELETE SET NULL ENABLE;


ALTER TABLE JOBS
ADD CONSTRAINT check_salary_difference CHECK ((MAX_SALARY - MIN_SALARY) >= 2000);
